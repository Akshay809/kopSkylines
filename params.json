{"name":"kopSkylines","tagline":"Framework for implementing Skyline algorithms | Easy-2-use library for finding Skylines","body":"## Directory structure:\r\n- **data**\r\n    - Data Generators and configuration files\r\n    - Data source files (.dat, .csv, .xlsx, .json, .xml)\r\n- **include**: header files\r\n    - **Data.h**\r\n        - Interface definition of DataModel used\r\n    - **DataAdapter.h | JSONAdapter.h | XMLAdapter.h | DataReader.h | DataWriter.h**\r\n        - Data (many format) Read/Write related logic\r\n    - **Exceptions.h | Helper.h**\r\n        - Available across all header files\r\n    - **kdTree.h | Heap.h**\r\n        - Algorithm specific\r\n    - **Skyline.h**\r\n        - Interface definition of types of Skyline algorithms available/possible\r\n    - **rapidjson/**\r\n        - header-only library of \"memory based JSON parser for c++\"\r\n        - Source: https://github.com/miloyip/rapidjson\r\n- **lib**: implementations of interface/methods declared above\r\n    - **DataInstance.cpp | DataObject.cpp**\r\n        - implements Data.h\r\n    - **DataAdapter.cpp | Heap.cpp | kdTree.cpp | Helper.cpp**\r\n        - implements corresponding .h\r\n    - **full_naive.cpp | k_naive.cpp | p_naive.cpp | p_BottomUp.cpp | kop_naive.cpp | kop_BPR.cpp**\r\n        - TypeOfSkyline_TypeOfAlgorithm method implementation\r\n- **test**\r\n    - Test programs and config\r\n    - result/\r\n- **Skyline.config**\r\n    - Details about type_of_algorithm to be used for a type_of_skyline\r\n    - **Needed to build tests**\r\n- **.depend | .tmp**\r\n    - Autogenerated files\r\n- **Makefile**\r\n    - Current list of Tasks directly used\r\n        - compile - Build all object files\r\n        - tests - Build all test programs\r\n        - config - Generate Skyline.config's template, Manual editing needed/compulsory\r\n        - data - Build Data generators\r\n        - clean/cleanData - For all object or executable files / For all DataSource files\r\n- **README.md**\r\n    - this file\r\n\r\n## Instructions to write test programs / use implemented skyline algorithms:\r\nIt is a very easy to use library, only three steps required.\r\n\r\n1. include \"Skyline.h\"\r\n2. Construct a Skyline object, pass as parameters the data source file name followed by output directory name\r\n3. Call findSkyline method of above object, pass all the parameters required depending on type of skyline. Check exact order in Skyline.h\r\n\r\n## Execution instructions:\r\n1. *make clean* - Cleans all executable/object files in entire directory\r\n2. *make cleanData (optional)* - Cleans all data source files, if any\r\n3. *make compile* - Builds all source files inside lib/\r\n4. *make config* - generates Skyline.config template, editing **needed/compulsory**\r\n5. Edit Skyline.config file. Leave only a single implementation name per skyline type. e.g.\r\n    - leave exactly one name from p_naive and p_BottomUp\r\n6. *make tests* - Builds all test programs inside test/\r\n7. *make data (optional)* - Builds all data generators inside data/\r\n8. move or generate data source files into data/ , (only .json format supported)\r\n9. run test programs inside test (provide appropriate inputs), results inside test/result/ (in .json format)\r\n\r\n## Instructions to write new skyline algorithms:\r\n1. Add a prototype of the method for this type of skyline in *Skyline.h*. But remember to add this new method only if it does not match an already existing type. e.g. a new algorithm to solve full skyline does not require a new prototype declaration.\r\n2. If a new skyline method is added, overload *findskyline()* method of the *Skyline* class\r\n3. Define the new skyline method in a separate file, inside lib/\r\n4. The Data model defined in Data.h can be used as it is, or can be extended as per requirement; More exceptions and helper functions can also be introduced. Also no need to handle read/write tasks separately.","google":"UA-68216442-1","note":"Don't delete this file! It's used internally to help with page regeneration."}